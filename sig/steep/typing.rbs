use Steep::TypeInference::Context, Steep::TypeInference::ContextArray, Steep::TypeInference::MethodCall

module Steep
  class Typing
    class UnknownNodeError < StandardError
      attr_reader op: Symbol

      attr_reader node: Parser::AST::Node

      def initialize: (Symbol op, node: Parser::AST::Node) -> void
    end

    # Maps the context for a given cursor position
    #
    class CursorContext
      attr_reader index: Integer?

      attr_reader data: [Range[Integer], Context]?

      def initialize: (Integer? index) -> void

      def set: (Range[Integer], Context context) -> void
             | (CursorContext) -> void

      # Assign the context for the range that covers given node
      #
      def set_node_context: (Parser::AST::Node node, Context context) -> void

      # Assign the context for the range that covert the *body* of the given node
      #
      # What the *body* exactly is depends on the node type.
      #
      def set_body_context: (Parser::AST::Node node, Context context) -> void

      %a{pure} def context: () -> Context?

      %a{pure} def range: () -> Range[Integer]?

      private

      def block_range: (Parser::AST::Node) -> Range[Integer]
    end

    attr_reader source: Source

    attr_reader errors: Array[Diagnostic::Ruby::Base]

    attr_reader typing: Hash[Parser::AST::Node, AST::Types::t]

    attr_reader parent: Typing?

    attr_reader parent_last_update: Integer?

    attr_reader last_update: Integer

    attr_reader should_update: bool

    attr_reader cursor_context: CursorContext

    attr_reader root_context: Context

    attr_reader method_calls: Hash[Parser::AST::Node, MethodCall::t]

    attr_reader source_index: Index::SourceIndex

    def initialize: (source: Source, root_context: Context, ?parent: Typing?, ?parent_last_update: Integer?, ?source_index: Index::SourceIndex?, cursor: Integer?) -> void

    def add_error: (Diagnostic::Ruby::Base error) -> void

    def add_typing: (Parser::AST::Node node, AST::Types::t `type`, top) -> void

    def add_call: (Parser::AST::Node node, MethodCall::t call) -> void

    def has_type?: (Parser::AST::Node node) -> bool

    def type_of: (node: Parser::AST::Node) -> AST::Types::t

    def call_of: (node: Parser::AST::Node) -> TypeInference::MethodCall::t

    def block_range: (Parser::AST::Node node) -> Range[Integer]

    def dump: (untyped io) -> untyped

    def self.summary: (untyped node) -> ::String

    def new_child: [A] () { (Typing) -> A } -> A
                 | () -> Typing

    def each_typing: () { ([Parser::AST::Node, AST::Types::t]) -> void } -> void

    # Push the current changes to the `#parent` typing
    #
    # * Raises an error if `#parent` is `nil`
    # * Raises an error if `#parent` is changed since `#new_child` call that instantiated `self`
    #
    def save!: () -> void
  end
end
